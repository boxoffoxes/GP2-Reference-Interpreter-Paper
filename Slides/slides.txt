% A Reference Interpreter for the Graph Programming Language GP 2
% Christopher Bak, Glyn Faulkner, Detlef Plump & Colin Runciman
% 2015-04-11


# Motivation

- Test correctness of later compiled implementations
- Fully implement non-determinacy
- Familiarise language implementers with the semantics of GP 2
- Identify any gaps or ambiguities in the semantics

. . .

**Simplicity is an over-riding aim**

- Speed and memory use are secondary concerns
- Sophistication is to be actively avoided if it complicates the implementation!



# Requirements

General requirements:

- Quick to develop <!-- not the main drive of our research -->
- Easy to maintain and reason about
- Must be fast enough to do "useful work"

. . .

For a given program/host-graph pair...

- Generate all possible output graphs  <!-- iso-check is expensive! -->
- Produce all distinct output graphs up to isomorphism <!-- build a library of correct graphs -->
- Output a single result  <!-- e.g. sierpinski -->


# Requirements

Also, stand-alone tools:

- Isomorphism checker
- Host-graph generator
- Graph viewer

<!--
- speed is a nice-to-have, but not a goal
	- needs to be fast enough to do useful work in its checking capacity -- if we need to run it on our departmental compute server for two weeks to get our set of comparison graphs (up to isomorphism) that's acceptable for a RI in a way that it wouldn't be in a production compiler.
-->

# Implementation

- Based on the GP 2 semantics
- Written in Haskell[^1]

\begin{center}
\scalebox{0.9}{ \input{../architecture.tex} }
\end{center}

[^1]: <https://www.haskell.org/>

# Implementation

\begin{center}
\small
\scalebox{0.65}{\input{../modules.tex}}
\end{center}

- Approx. 1000 SLOC
- Exploits distinctive features of Haskell to achieve conciseness:
	* list-comprehensions
	* lazy evaluation


# Performance


* Produce a fourth-generation Sierpinski triangle in 6.5 seconds <!-- Sierpinski grows exponentially in both time and space -->
* A cyclic graph of 1000 nodes fails an acyclicity test in 1.8 seconds <!-- failure can be a major cost in graph matching -->
* Transitive closure of a linear graph of 50 nodes takes 66 seconds
* Vertex colouring a 9x9 grid in one-result mode takes less than a second...
* ...but in all-result mode exceeds 5 minutes with only a 3x3 grid <!-- reference Chris' earlier slide of 2x2 -- many different solutions. Exploring all outcomes rapidly becomes intractable for some problems! -->

A more detailed discussion of performance can be found in the paper



# Conclusions


- We have developed a useful reference tool for our ongoing research
- Also useful ancillary tools:
	- GraphViz-based graph visualiser
	- Stand-alone isomorphism checker
	- Host-graph generator, based on hypergraph grammars <!-- ported from original GP -->
- Gained a clear understanding of the GP 2 semantics
- Become aware of some 'edge-cases' that might trip us up in our compiler work <!-- e.g. GP 2 doesn't have explicit back-tracking (failure is failure), but there is implicit back-tracking from failure part-way through a procedure call -->


# Further work

- Better error reporting
- A performant compiler <!-- two projects underway -->
- GUI program editor
- Formal verification against GP 2 semantics. <!-- scale of project! -->

\begin{center}
\includegraphics[scale=0.2]{gp2graph_9CRkVV.pdf}
\end{center}

<!-- no GP talk is complete without a Sierpinski triangle! -->

<!-- offer to do a small demo if anyone is interested -->


<!-- vim: set filetype=pandoc spell lbr : -->
